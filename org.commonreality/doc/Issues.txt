General Design Issues


Change of participants during an active run : The addition or removal of participants
 dynamically during an active run is only poorly supported. Because of the threaded
 nature of the DefaultReality, it is possible for state commands to be issued while
 a participant is coming or going. As it is currently implemented, the dynamic particpant
 will likely not receive notification. Because we are currently running all participants
 from the same VM, this isn't much of an issue. The RealityParser issues connect on
 all the participants and waits for completion before starting reality. Once this is
 no longer the case, more finesed handling of this threading issue will need to be addressed.
 A simple first stab would be to make state changes (including the addition/removal of 
 participants) a synchronization point.
 *RESOLVED, but untested*
 
Loss of participant data : When multiple participants are connecting at roughly the same
 time, the later participant may receive the former participant's ADD, but have missed
 the data. Since sensors are always started before agents, the typical symptom is that
 the agent is unaware of the sensor (not a serious issue). The opposite, however, would
 be a serious problem. The sequence of events is this: A is accepted, sends its data. B
 is accepted, but doesnt receive A's data (since it isn't part of the send-to-all set yet),
 A sends its official add command, B sends data and add command. B receives add.A, but has no data.
 The fix recommended above should be sufficient to resolve this as well.  [although,
 to handle the asynchrony of the communications, we'll actually need to maintain a list
 of in-process additions/removals and deal with that]
 *RESOLVED, but untested*
 

  